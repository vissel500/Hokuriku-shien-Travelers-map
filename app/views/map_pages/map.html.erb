<head>
  <script>
    document.addEventListener("turbo:load", function() {
      if (!window.google || !window.MarkerClusterer) {
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js";
        script.onload = loadGoogleMaps;
        document.head.appendChild(script);
      } else {
        initMap();
      }
    });

    function loadGoogleMaps() {
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyANC15Na85B6UwwYHXVP9NturgBAe0BpyQ&libraries=places&language=ja&callback=initMap";
      document.head.appendChild(script);
    }
  </script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
  <div id="map"></div>

  <div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="infoModalLabel">観光地の詳細</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- ここに動的な内容が入ります -->
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    var markersByCategory = {};
    var markerCluster;
    var isVisible = true;

    function initMap() {
      var MyLatLng = new google.maps.LatLng(36.5748441, 136.6483217); // 北陸地方の中心点
      var Options = {
        zoom: 10,
        center: MyLatLng,
        streetViewControl: false,
        fullscreenControl: false,
        mapTypeId: "roadmap"
      };
      var map = new google.maps.Map(document.getElementById("map"), Options);
      map.markers = [];

      // TrafficLayer の追加
      var trafficLayer = new google.maps.TrafficLayer();
      trafficLayer.setMap(map);

      // TransitLayer の追加
      var transitLayer = new google.maps.TransitLayer();
      transitLayer.setMap(map);

      // トラフィックレイヤーのトグル機能
      document.getElementById("toggle-traffic").addEventListener("click", function() {
        if (trafficLayer.getMap()) {
          trafficLayer.setMap(null);
          this.classList.remove("btn-success");
          this.classList.add("btn-secondary");
        } else {
          trafficLayer.setMap(map);
          this.classList.remove("btn-secondary");
          this.classList.add("btn-success");
        }
      });

      // トランジットレイヤーのトグル機能
      document.getElementById("toggle-transit").addEventListener("click", function() {
        if (transitLayer.getMap()) {
          transitLayer.setMap(null);
          this.classList.remove("btn-secondary");
          this.classList.add("btn-success");
        } else {
          transitLayer.setMap(map);
          this.classList.remove("btn-success");
          this.classList.add("btn-secondary");
        }
      });

      var input = document.getElementById("pac-input");
      var autocomplete = new google.maps.places.Autocomplete(input, {componentRestrictions: {country: "jp"}});
      autocomplete.bindTo("bounds", map);
      autocomplete.addListener("place_changed", function() {
      });
      var service = new google.maps.places.PlacesService(map);

      document.getElementById("search-button").addEventListener("click", function() {
        var input = document.getElementById("pac-input").value;
        if (!input) return;

        service.findPlaceFromQuery({query: input, fields: ["name", "geometry", "place_id"]}, function(results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK && results) {
            map.markers.forEach(marker => marker.setMap(null));
            map.markers = [];
            var bounds = new google.maps.LatLngBounds();
            results.forEach(place => {
              if (!place.geometry) return;

              var marker = new google.maps.Marker({
                map: map,
                title: place.name,
                position: place.geometry.location
              });
              map.markers.push(marker);

              marker.addListener("click", function() {
                service.getDetails({placeId: place.place_id}, function(result, status) {
                  if (status === google.maps.places.PlacesServiceStatus.OK) {
                    var content = '<div><strong>' + 'Address: ' + result.formatted_address + '<br>' +
                                  'Phone: ' + (result.formatted_phone_number || 'N/A') + '<br>' +
                                  'Website: ' + (result.website ? '<a href="' + result.website + '">' + result.website + '</a>' : 'N/A') + '<br>' +
                                  'Hours: ' + (result.opening_hours ? result.opening_hours.weekday_text.join(', ') : 'N/A') + '<br>' +
                                  '<img src="' + (result.photos && result.photos.length ? result.photos[0].getUrl() : '') + '" alt="Place image" style="width:100px;"><br>' +
                                  'Reviews: ' + (result.reviews && result.reviews.length ? result.reviews[0].text : 'N/A') + '</div>';

                    var modalTitle = document.getElementById("infoModalLabel");
                    var modalBody = document.querySelector("#infoModal .modal-body");

                    modalTitle.textContent = result.name;
                    modalBody.innerHTML = content;

                    var myModal = new bootstrap.Modal(document.getElementById("infoModal"));
                    myModal.show();
                  }
                });
              });
              bounds.union(place.geometry.viewport ? place.geometry.viewport : place.geometry.location);
            });
            map.fitBounds(bounds);
          }
        });
      });

      var markerCluster = new MarkerClusterer(map, [], {
        imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
      });

      fetch("/tourist_spots")
        .then(response => response.json())
        .then(data => {
          data.forEach(spot => {
            var marker = new google.maps.Marker({
              position: new google.maps.LatLng(spot.latitude, spot.longitude),
              title: spot.name,
              map: map
            });

          marker.addListener("click", function() {
            var modalTitle = document.getElementById("infoModalLabel");
            var modalBody = document.querySelector("#infoModal .modal-body");

            modalTitle.textContent = spot.name;
            modalBody.innerHTML = '<div>' + '住所: ' + spot.address + '<br>' +
                                  'カテゴリ: ' + spot.category + '</div>';

            var myModal = new bootstrap.Modal(document.getElementById("infoModal"));
            myModal.show();
          });

            markersByCategory[spot.category] = markersByCategory[spot.category] || [];
            markersByCategory[spot.category].push(marker);
          });
          updateMarkers("All");
        });

      window.updateMarkers = function(category) {
        markerCluster.clearMarkers();
        if (category === "All" || category === "全て(マップに表示する観光地のカテゴリを選択)" && isVisible) {
          Object.values(markersByCategory).flat().forEach(marker => markerCluster.addMarker(marker, false));
        } else if (isVisible) {
          markersByCategory[category].forEach(marker => markerCluster.addMarker(marker, false));
        }
      };

      document.getElementById("toggle-tourist-spots").addEventListener("click", function() {
        isVisible = !isVisible;
        markerCluster.clearMarkers();
        if (isVisible) {
          updateMarkers(document.getElementById("category-selector").value);
        }
        this.classList.toggle("btn-success", isVisible);
        this.classList.toggle("btn-secondary", !isVisible);
      });
    }
    window.updateMarkers = updateMarkers;
  </script>
</body>
