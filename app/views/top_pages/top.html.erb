<!DOCTYPE html>
<html lang="ja">

<head>
<meta charset="UTF-8">
<title>Sample_GoogleMap</title>

<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDFj52OV4F2yLRNV-p19g0Eb_1wunM7yLM&libraries=places&language=ja&callback=initMap"></script>

<style>
html { height: 100% }
body { height: 100% }
#map { height: 100%; width: 100%}
#pac-input {
    position: absolute;
    top: 10px;
    left: 25%;
    width: 50%;
    z-index: 5;
    padding: 10px;
    border: 1px solid #ccc;
    background-color: #fff;
    font-family: Roboto, Arial, sans-serif;
    font-size: 15px;
    font-weight: 300;
    text-overflow: ellipsis;
  }
  
  #pac-input:focus {
    border-color: #4d90fe;
  }
  
  #map-menu-container {
    position: absolute;
    top: 10px;
    left: 25%;
    z-index: 5;
    background-color: #fff;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 6px rgba(0,0,0,.3);
    width: 20%;
  }
  
  .controls {
    background-color: #fff;
    font-family: Roboto, Arial, sans-serif;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 400px;
  }
  
  .controls:focus {
    border-color: #4d90fe;
  }

  #map-control-container {
    position: absolute;
    top: 122px;
    left: 83px;
    z-index: 5;
  }
</style>
</head>

<body>
<div id="map-menu-container">
  <input id="pac-input" class="controls" type="text" placeholder="検索...">
  <!-- ここにその他のメニュー項目やフィルタリングのオプションを追加 -->
</div>
<div id="map-control-container">
  <button id="toggle-traffic" class="btn btn-success btn-sm toggle-button">トラフィック情報</button>
  <button id="toggle-transit" class="btn btn-secondary btn-sm toggle-button">トランジット情報</button>
</div>
<div id="map"></div>

<script>
  function initMap() {
    var MyLatLng = new google.maps.LatLng(36.5748441, 136.6483217); // 北陸地方の中心点
    var Options = {
      zoom: 8,
      center: MyLatLng,
      mapTypeId: 'roadmap'
    };
    var map = new google.maps.Map(document.getElementById('map'), Options);

    // TrafficLayer の追加
    var trafficLayer = new google.maps.TrafficLayer();
    trafficLayer.setMap(map);

    // TransitLayer の追加
    var transitLayer = new google.maps.TransitLayer();
    transitLayer.setMap(map);

    // トラフィックレイヤーのトグル機能
    document.getElementById('toggle-traffic').addEventListener('click', function() {
      if (trafficLayer.getMap()) {
        trafficLayer.setMap(null);
        this.classList.remove('btn-success');
        this.classList.add('btn-secondary');
      } else {
        trafficLayer.setMap(map);
        this.classList.remove('btn-secondary');
        this.classList.add('btn-success');
      }
    });

    // トランジットレイヤーのトグル機能
    document.getElementById('toggle-transit').addEventListener('click', function() {
      if (transitLayer.getMap()) {
        transitLayer.setMap(null);
        this.classList.remove('btn-secondary');
        this.classList.add('btn-success');
      } else {
        transitLayer.setMap(map);
        this.classList.remove('btn-success');
        this.classList.add('btn-secondary');
      }
    });

    // プレイス検索ボックスを設定
    var input = document.getElementById('pac-input');
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);

    // エンターキーが押されたときのイベントリスナー
    input.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault(); // デフォルトのフォーム送信を防ぐ
        placeSearch(map, input.value);
      }
    });

    function placeSearch(map, query) {
      var search = new google.maps.places.PlacesService(map);
      search.textSearch({ query: query }, function(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK && results[0]) {
          var place = results[0];
          map.setCenter(place.geometry.location);
          map.setZoom(17);

          new google.maps.Marker({
            map: map,
            position: place.geometry.location
          });
        } else {
          window.alert("検索結果が見つかりませんでした: " + query);
        }
      });
    }

    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);

    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);
      }

      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      // 情報ウィンドウの内容を設定（infowindow-content要素が必要）
      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    });

    // 以前の観光地を検索してマップにマーカーを追加するロジックをここに追加
    // ※ここに観光地のマーカーを追加するコードを以前のスタイルで追記
  }
</script>

<div id="infowindow-content">
  <img src="" width="16" height="16" id="place-icon">
  <span id="place-name" class="title"></span><br>
  <span id="place-address"></span>
</div>

</body>
</html>
